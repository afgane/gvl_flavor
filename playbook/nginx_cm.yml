---
#
# Compiling the pam auth module requires libpam-dev on Debian
#
- hosts: nectar
  vars:
    build_id: 20140507b01
    install_dir: /usr/nginx
    work_dir: /tmp/nginx
    log_dir: /var/log/nginx
    modules_dir: /opt/galaxy
    nginx_version: 1.4.7
    nginx_sha256: 23b8ff4a76817090678f91b0efbfcef59a93492f6612dc8370c44c1f1ce1b626
    nginx_upload_module_repo: https://github.com/vkholodkov/nginx-upload-module.git
    nginx_upload_module_branch: 2.2
    nginx_http_auth_pam_module_version: 1.3
    nginx_http_auth_pam_module_sha256: 199dff5d11fbb3b6ddf9c8a60cc141970125a3f8e7a06f245e3175e93ca947e3
    openssl_version: 1.0.1g
    openssl_sha256: 53cb818c3b90e507a8348f4f5eaedb05d8bfe5358aabb508b7263cc670c3e028
    pcre_version: 8.33
    pcre_sha256: 0a8b84eed13ce4e28017d297a457fdd66ab1068b80b2d1e26e932bed688074d7
    zlib_version: 1.2.8
    zlib_sha256: 36658cb768a54c1d4dec43c3116c27ed893e88b02ecfcb44f2166f9c0b7f2a0d
    nginx_configure_args: --prefix={{ install_dir }}
        --error-log-path={{ log_dir }}/error.log
        --http-log-path={{ log_dir }}/access.log
        --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock
        --http-client-body-temp-path={{ modules_dir }}/client_body_temp
        --http-proxy-temp-path={{ modules_dir }}/proxy_temp
        --http-fastcgi-temp-path={{ modules_dir }}/fastcgi_temp
        --http-uwsgi-temp-path={{ modules_dir }}/uwsgi_temp
        --http-scgi-temp-path={{ modules_dir }}/scgi_temp
        --user=galaxy --group=galaxy
        --with-http_ssl_module
        --add-module=../nginx_upload_module
        --add-module=../ngx_http_auth_pam_module-{{ nginx_http_auth_pam_module_version }}
        --with-pcre=../pcre-{{ pcre_version }}
        --with-openssl=../openssl-{{ openssl_version }}
        --with-zlib=../zlib-{{ zlib_version }}
    fpm_args: --maintainer "GVL <help@genome.edu.au>"
        --vendor "Nginx, Inc." --url http://nginx.org/
        --license "BSD 2-Clause, <URL:http://nginx.org/LICENSE>"
        -C {{ work_dir }}/nginx-{{ nginx_version }}-dest
  tasks:
  - name: Create work dirs
    command: "{{ item }}"
    with_items:
      - mkdir -p {{ work_dir }}
      - mkdir -p {{ modules_dir }}
      - mkdir -p {{ log_dir }}
  - name: Fetch nginx source
    get_url: url=http://nginx.org/download/nginx-{{ nginx_version }}.tar.gz
        sha256sum={{ nginx_sha256 }} dest={{ work_dir }}/nginx-{{ nginx_version }}.tar.gz
  - name: Untar nginx source
    command: tar zxf nginx-{{ nginx_version }}.tar.gz
        chdir={{ work_dir }} creates={{ work_dir }}/nginx-{{ nginx_version }}
  - name: Fetch nginx_upload_module source
    git: repo={{ nginx_upload_module_repo }}
        version={{ nginx_upload_module_branch }} dest={{ work_dir }}/nginx_upload_module
  - name: Fetch nginx_http_auth_pam_module source
    get_url: url=http://web.iti.upv.es/~sto/nginx/ngx_http_auth_pam_module-{{ nginx_http_auth_pam_module_version }}.tar.gz
        sha256sum={{ nginx_http_auth_pam_module_sha256 }} dest={{ work_dir }}/ngx_http_auth_pam_module-{{ nginx_http_auth_pam_module_version }}.tar.gz
  - name: Untar nginx_http_auth_pam_module source
    command: tar zxf ngx_http_auth_pam_module-{{ nginx_http_auth_pam_module_version }}.tar.gz
        chdir={{ work_dir }} creates={{ work_dir }}/ngx_http_auth_pam_module-{{ nginx_http_auth_pam_module_version }}
  - name: Fetch OpenSSL source
    get_url: url=https://www.openssl.org/source/openssl-{{ openssl_version }}.tar.gz
        sha256sum={{ openssl_sha256 }} dest={{ work_dir }}/openssl-{{ openssl_version }}.tar.gz
  - name: Untar OpenSSL source
    command: tar zxf openssl-{{ openssl_version }}.tar.gz
        chdir={{ work_dir }} creates={{ work_dir }}/openssl-{{ openssl_version }}
  - name: Fetch PCRE source
    get_url: url=ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-{{ pcre_version }}.tar.gz
        sha256sum={{ pcre_sha256 }} dest={{ work_dir }}/pcre-{{ pcre_version }}.tar.gz
  - name: Untar PCRE source
    command: tar zxf pcre-{{ pcre_version }}.tar.gz
        chdir={{ work_dir }} creates={{ work_dir }}/pcre-{{ pcre_version }}
  - name: Fetch zlib source
    get_url: url=http://zlib.net/zlib-{{ zlib_version }}.tar.gz
        sha256sum={{ zlib_sha256 }} dest={{ work_dir }}/zlib-{{ zlib_version }}.tar.gz
  - name: Untar zlib source
    command: tar zxf zlib-{{ zlib_version }}.tar.gz
        chdir={{ work_dir }} creates={{ work_dir }}/zlib-{{ zlib_version }}
  - name: Install fpm
    # gem: name=fpm state=present
    command: gem install fpm
  - name: Configure nginx
    command: ./configure {{ nginx_configure_args }}
        chdir={{ work_dir }}/nginx-{{ nginx_version }} creates={{ work_dir }}/nginx-{{ nginx_version }}/objs/ngx_auto_config.h
  - name: Build nginx
    command: make
        chdir={{ work_dir }}/nginx-{{ nginx_version }} creates={{ work_dir }}/nginx-{{ nginx_version }}/objs/nginx
  - name: Setup nginx configs
    command: "{{ item }}"
    with_items:
      - mkdir -p {{ install_dir }}/html/errdoc
      - wget -O cm_nginx_errdoc.tar.gz http://cloudman-dev.s3.amazonaws.com/cm_nginx_errdoc.tar.gz
      - tar xzf cm_nginx_errdoc.tar.gz -C {{ install_dir }}/html
      - touch {{ install_dir }}/conf/commandline_utilities_http.conf
      - touch {{ install_dir }}/conf/commandline_utilities_https.conf
  - name: Stage nginx package
    command: make DESTDIR={{ work_dir }}/nginx-{{ nginx_version }}-dest install
        chdir={{ work_dir }}/nginx-{{ nginx_version }} creates={{ work_dir }}/nginx-{{ nginx_version }}-dest
  - name: Create RPM
    command: fpm -s dir -t rpm -n gxy_nginx -v {{ nginx_version }}-{{ build_id }}.gxy -p {{ work_dir }}/gxy_nginx-{{ nginx_version }}-{{ build_id }}.gxy-x86_64.rpm {{ fpm_args }} opt var
        chdir={{ work_dir }}/nginx-{{ nginx_version }}-dest creates={{ work_dir }}/gxy_nginx-{{ nginx_version }}-{{ build_id }}.gxy-x86_64.rpm
    when: ansible_os_family == "RedHat"
  - name: Create deb
    command: fpm -s dir -t deb -n GVL-nginx -v {{ nginx_version }}-gvl{{ build_id }}+{{ ansible_lsb['codename'] }} -p {{ work_dir }}/gvl-nginx_{{ nginx_version }}-gvl{{ build_id }}+{{ ansible_lsb['codename'] }}_amd64.deb {{ fpm_args }} usr var
        chdir={{ work_dir }}/nginx-{{ nginx_version }}-dest creates={{ work_dir }}/gvl-nginx-{{ nginx_version }}-gvl{{ build_id }}-{{ ansible_lsb['codename'] }}-amd64.deb
    when: ansible_os_family == "Debian"
