# Configuration file for Fabric specifying filesystem information
# This can be adjusted and passed to fab on the commandline as '-c'
#
# For example
#
#   fab -f data_fabfile.py -H your_machine -c your_fabricrc.txt install_data_s3:your_biodata.yaml

flavor = GVLFlavor
flavor_dir = gvl.gvlflavor

# -- Details about the operating system
## Ubuntu
distribution = ubuntu
dist_name = precise
## Centos
#distribution = centos
## Debian
#distribution = debian
#dist_name = squeeze

# -- Installation details

# Unset to avoid CloudBioLinux customizations like setup scripts;
# or set to different edition to get specific customizations
edition = cloudbiolinux

# Whether to clean the system for EC2 AMI preparation;
# do not set on vagrant or local machines
is_ec2_image = false

# Global installation directory for packages and standard programs
system_install = /usr

# Local install directory for versioned software that will not
# be included in the path by default
local_install = ~/install

# Shell to be used by CBL scripts during runtime
shell_config = ~/.bashrc
shell = /bin/bash --noprofile -l -c

# Global setting for using sudo; allows installation of custom packages
# by non-privileged users.
# *Note*: ``system_install`` needs to point to a user-writeable directory if
# ``use_sudo`` is set to ``False``
use_sudo = True

# -- Details about reference data installation

# Path where biological reference data files should be retrieved to
data_files = /mnt/galaxyIndices

# --  Details about installing Galaxy and its dependencies. Values behind the
#     comments are the defaults.

# Specify as which user should Galaxy be installed
#galaxy_user = galaxy

# Path where Galaxy application is installed
galaxy_home = /mnt/galaxy/galaxy-app

# URL for the Galaxy application source code repository
galaxy_repository = https://bitbucket.org/galaxy/galaxy-dist/

# If ``True``, Galaxy repository will not be custom-configured after being cloned
# The customization details are primarily targeted at a cloud deployment; for
# details, see ``cbl.galaxy.__init__ -> _configure_galaxy_repository``
#galaxy_preconfigured_repository = False

# A path to the binaries for interacting with PostgreSQL
#postgres_bin_dir = /usr/lib/postgresql/9.1/bin
#postrges_user = postgres
#postgres_port = 5840

# If ``True``, setup and initialize Postgres database for use by Galaxy
# according to the following options
galaxy_setup_database = false
#galaxy_db_name = galaxy
#galaxy_database_path = /mnt/galaxy/db
#galaxy_ftp_user_password = fu5yOj2sn
#galaxy_universe_wsgi_url = https://bitbucket.org/galaxy/cloudman/raw/tip/universe_wsgi.ini.cloud

# If ``True``, setup Galaxy as a system-level service controlled via init.d
#galaxy_setup_service = False

# If ``True``, setup Xvfb as a system-level service via init.d
#galaxy_setup_xvfb = False

# Location of Galaxy's .loc files
#galaxy_loc_files = /mnt/galaxy/galaxy-app/tool-data/

# Galaxy requires Java tools to have their jar files places in a specific
# directory, so specify it here.
#galaxy_jars_dir = /mnt/galaxy/galaxy-app/tool-data/shared/jars

# If ``True``, install a set of tools considered as Galaxy dependencies
galaxy_install_dependencies = false

# Specify a custom location to a YAML file containing a list of tools to
# install as Galaxy dependencies
galaxy_tools_conf = contrib/flavor/gvl/tools.yaml

# Location where (some?!) Galaxy dependency tools should be installed
galaxy_tools_dir = /mnt/galaxy/tools

# If ``True``, install R packages listed in contrib/cloudman/tools.yaml
galaxy_install_r_packages = True

# Paths for respective file systems that will be added to ``/etc/exports``
# and thus exported via NFS when the operating system boots
#galaxy_data_mount = /mnt/galaxyData
#galaxy_tools_mount = /mnt/galaxyTools
#galaxy_indices_mount = /mnt/biodata
#extra_nfs_exports = comma,separate,desired,paths


# -- Tool-specific configurations

## Nginx
# Whether to install nginx from a package (see _install_nginx_package in
# cloudman/__init__.py module).
use_nginx_package = true
# Where nginx.conf needs to be stored on the remote system. Note that this
# applies only if nginx is installed from a package and the value here must
# match the location of that file set when the package was built (see
# https://github.com/afgane/gvl_flavor/tree/master/playbook)
nginx_remote_conf_path = /usr/nginx/conf/nginx.conf
# A location of a custom nginx.conf template (can be relative to the root CBL dir)
nginx_conf_template_path = contrib/flavor/gvl/nginx.conf.template
# nginx-specific config options
nginx_upload_store_path = /mnt/galaxy/upload_store
nginx_upload_store_path_SCF_standalone = /home/ubuntu/upload_store

# SCF
# uncomment to create a standalone SCF image without galaxy
#scf_standalone = true

# Picard home
picard_home = /usr/share/java/picard

# Science Collaboration Framework
scf_dbname = scfdb
scf_username = scfuser
scf_password = scfgv7
scf_dest_dir = www
scf_site_name = GVL

# -- novnc configuration options
# Configure novnc along with CloudMan
configure_novnc = True
# Where to install novnc
novnc_install_dir = /opt/novnc
# Password used by novnc to connect to vncserver.
vnc_password = change_this_before_running_the_build
# Set vnc_user if different than env.user
vnc_user=ubuntu
vnc_display=1
vnc_depth=16
vnc_geometry=1024x768

## Desktop configuration
# Configure JWM desktop manager along with VNC
configure_desktop = true
